#!/usr/bin/env sol-fbp-runner

# This file is part of the Soletta Project
#
# Copyright (C) 2015 Intel Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is the main flow of the factory-monitor.
# It has an OIC server as monitor - more details about it on monitor fbp
# file. Uncomment the one to be used - search for 'Monitor nodes' on this
# file. Its OIC client custom-node observes a list of monitors, showing
# temperature readings of them in a round roibin fashion. When
# one of the monitors outputs 'FAILURE' alert, client shows corresponding
# message. Then, one is expected to use Buttons on the terminal,
# to decide what to do regarding the failure: Dismiss it or report it.
# To dismiss, one just needs to press btn1. If btn2 is pressed, a
# selector form will be shown to choose a name to report the failure tp.
# In the form, btn1 chooses a name, and btn2 scrolls the list of names.

##Monitor nodes
#Uncomment the one to be used. For testing purposes on desktop,
#'monitor-dummy' shall be enough. If using a real board, one can also
#uncomment the 'Buzzer' related nodes - search for 'buzzer' on this file.
DECLARE=Monitor:fbp:monitor-dummy.fbp
#DECLARE=Monitor:fbp:monitor-quark-se-devboard.fbp

# Monitor declaration. With this, sample will run a monitor and a client
# on the same Soletta application. However, 'monitor-dummy.fbp' may be run
# separately, so you have another monitors available. Of course, if you
# comment following line, you'll have this code only doing 'client' role.
# Note that to run different monitors, you'll need them to be on different
# machines or virtual machines, as currently, on Linux, clients will only
# bind to one monitor. Do not forget to change, on 'monitor-dummy.fbp',
# monitor name, or they'll all look the same.
# See README.md for more information.
monitor(Monitor)

##Client nodes

scanner(monitor/client-temperature)
temperature_pool(custom-node/monitor-pool)
timer_scan(timer:interval=5000)
timer_display(timer:interval=3000)

lcd(Display)
led(Led)
#buzzer(Buzzer)

raw_btn1(Btn1)
raw_btn2(Btn2)

btn1(switcher/empty)
raw_btn1 OUT -> PULSE_IF_TRUE _(converter/boolean-to-empty) OUT -> IN[0] btn1

btn2(switcher/empty)
raw_btn2 OUT -> PULSE_IF_TRUE _(converter/boolean-to-empty) OUT -> IN[0] btn2

normal_msg(string/concatenate)
_(constant/string:value="\n") OUT -> IN[1] normal_msg
_(constant/string:value=" C") OUT -> IN[3] normal_msg

error_msg(string/concatenate)
_(constant/string:value="Failure on ") OUT -> IN[0] error_msg

supervisor_selector(form/selector:rows=2,columns=16,circular=true)
supervisors(test/string-generator:sequence="Denethor Saruman Sauron Morgoth --Cancel")
supervisors OUT -> ADD_ITEM supervisor_selector

msg_switcher(switcher/string:keep_state=true)
normal_msg OUT -> IN[0] msg_switcher
error_msg OUT -> IN[1] msg_switcher
supervisor_selector STRING -> IN[2] msg_switcher

#Start with led OFF and 'Scanning...' message
_(constant/boolean:value=false) OUT -> IN led
_(constant/string:value="Scanning...") OUT -> IN lcd

#Continuously scan devices
timer_scan OUT -> SCAN scanner
scanner DEVICE_ID -> ADD_DEVICE_ID temperature_pool

#Keep cicling information of known devices
timer_display OUT -> TICK temperature_pool

#Prepare normal information
temperature_pool NAME -> IN[0] normal_msg
temperature_pool TEMPERATURE -> IN _(converter/float-to-string) OUT -> IN[2] normal_msg

#Prepare error information
temperature_pool NAME -> IN[1] error_msg

#Decides if shows a normal message or an error one
temperature_pool FAILURE -> IN failure(boolean/filter)
failure TRUE -> IN error_screen(converter/empty-to-int:output_value=1) OUT -> IN_PORT msg_switcher
failure FALSE -> IN normal_screen(converter/empty-to-int:output_value=0) OUT -> IN_PORT msg_switcher
msg_switcher OUT[0] -> IN lcd

#Turn Led on on failure, stops timer_display and start buzzer
#If not on failure, do the opposite.
temperature_pool FAILURE -> IN led
temperature_pool FAILURE -> IN _(boolean/not) OUT -> ENABLED timer_display
#temperature_pool FAILURE -> ENABLED buzzer

#Buttons have three states: 0 - Disabled, 1 - On error screen, 2 - On selector screen
#On failure, enable state 1
failure TRUE -> IN btn_state1(converter/empty-to-int:output_value=1)
btn_state1 OUT -> OUT_PORT btn1
btn_state1 OUT -> OUT_PORT btn2

#If choose 'To report supervisors', enable state 2
btn2 OUT[1] -> IN btn_state2(converter/empty-to-int:output_value=2)
btn_state2 OUT -> OUT_PORT btn1
btn_state2 OUT -> OUT_PORT btn2

#Btn1 act as 'dismiss' on state 1
btn1 OUT[1] -> IN dismiss(converter/empty-to-boolean:output_value=true)
dismiss OUT -> IN _(boolean/not) OUT -> SET_FAILURE temperature_pool
dismiss OUT -> IN _(converter/empty-to-string:output_value="Dismissed") OUT -> IN lcd
failure FALSE -> IN btn_state0(converter/empty-to-int:output_value=0)
btn_state0 OUT -> OUT_PORT btn1
btn_state0 OUT -> OUT_PORT btn2

#Btn2 activated, show a list of 'supervisors'
btn2 OUT[1] -> IN supervisors_screen(converter/empty-to-int:output_value=2) OUT -> IN_PORT msg_switcher

#Buttons now control form/selector
btn1 OUT[2] -> SELECT supervisor_selector
btn2 OUT[2] -> NEXT supervisor_selector

#If '--Cancel' was the chosen item, go back to state 2 (error screen)
supervisor_selector SELECTED -> IN str_sw(string/starts-with:prefix="--")
str_sw OUT -> IN canceled(boolean/filter)
canceled TRUE -> IN btn_state1
canceled TRUE -> IN error_screen

#If a name was chosen, dismiss error msg
canceled FALSE -> IN dismiss
